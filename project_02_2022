
class TreeNode(object):
    def __init__(self, name, parent = None, nodeType = None):
        self.key = name
        self.parent=parent
        self.children = []
        self.nodeType = nodeType

    def add_child(self, node, data):
        var = TreeNode(node, parent=self, nodeType = data)
        self.children.append(var)
        return var

'''Imprimir arvore'''
def show(node, level=0):
    print(f'{"---" * level}{node.key}')
    for f in sorted(node.children, key=lambda node: node.key):
        show(f, level + 1)

'''Inserir elementos na arvore'''
def insert_check(direct, caminho):
    if len(direct.children) > 0:
        for i in range(len(direct.children)):
            if caminho[0] == direct.children[i].key:
                if len(caminho) > 1:
                    insert_check(direct.children[i], caminho[1:])
                else:
                    print('DIRETÓRIO JÁ EXISTE')
                return
            elif i == len(direct.children) - 1:
                var = direct.add_child(caminho[0], 0)
                if len(caminho) > 1:
                    insert_check(var, caminho[1:])
                return
    else:
        if len(caminho) > 0:
            new_child = direct.add_child(caminho[0], 0)
            if len(caminho) > 1:

                insert_check(new_child, caminho[1:])
            else:
                return

def insert_touch(root, caminho):
    if len(root.children) == 0:
        if len(caminho) > 1:
            print('CAMINHO INVÁLIDO')
        else:
            if root.nodeType != 1:
                root.add_child(caminho[0], 1)
            else:
                print('CAMINHO INVÁLIDO')
    else:
        for i in range(len(root.children)):
            if caminho[0] == root.children[i].key:
                if len(caminho) > 1:
                    insert_touch(root.children[i], caminho[1:])
                elif i == len(root.children) -1:
                    if root.children[i].nodeType == 0:
                        print('CAMINHO INVÁLIDO')
                    else:
                        print('ARQUIVO JÁ EXISTE')
                        return
        return

def remove(root, caminho):
    global diretorio_atual
    if len(root.children) > 0:
        for i in range(len(root.children)):
            if caminho[0] == root.children[i].key:
                if len(caminho) > 1:
                    remove(root.children[i], caminho[1:])
                else:
                    if diretorio_atual == root.children[i] or diretorio_atual in root.children[i].children:
                        diretorio_atual = 'pombo'
                    del root.children[i]
            elif i == len(root.children) -1:
                print('ARQUIVO ou DIRETÓRIO não existe')
    else:
        print('CAMINHO INVÁLIDO')

def cd(root, caminho):

    '''implemetar o ponto ponto'''
    if len(root.children) > 0:
        for i in range(len(root.children)):
            if caminho[0] == root.children[i].key:
                if len(caminho) > 1 and root.children[i].nodeType == 0:
                    return(cd(root.children[i], caminho[1:]))
                elif len(caminho) > 2 and root.children[i].nodeType == 1:
                    return -1
                else:
                    return root.children[i]
            if i == len(root.children) -1:
                return 0
    else:
        return 0

def pwd(atual, teste = None):
    if atual.parent:
        teste = True
        pwd(atual.parent, teste)
        print('/', end='')
        print(atual.key, end='')
    elif atual == root and not teste:
        print('/', end='')

def pwdeee(atual, lista, teste = None):
    if atual.parent:
        teste = True
        pwdeee(atual.parent, teste)
        lista.append(atual.key)
    return lista

# def pwc_dot(atual):
#     if atual.parent:
#         pwc_dot(atual.parent)
#     else:
#         return atual

def f(corrente, n):
    if n > 0:
        return f(corrente.parent, n-1)
    else:
        return corrente.key

def make_dir(entrada):
    novo_para_teste = entrada[1]
    novo_para_teste.split('/')
    if '..' in novo_para_teste:
        print('a')
        tamanho = novo_para_teste.count('..')
        g = f(diretorio_atual, tamanho)
        diretorio = '/' + g + novo_para_teste[(3)*tamanho-1:]
        diretorio = diretorio[1:].split('/')
        return diretorio
    elif '.' in novo_para_teste and novo_para_teste.count('.') == 1:
        lista = []
        tst = pwdeee(diretorio_atual, lista)
        # diretorio = tst.key+entrada[1:]
        # print(diretorio)
    else:
        diretorios = entrada[1][1:].split('/')
        return diretorios


def move(root, vetor):
    if len(root.children) == 0:
        print('CAMINHO INVÁLID')
        return 0
    else:
        for i in range(len(root.children)):
            if vetor[0] == root.children[i].key:
                if len(vetor) > 1:
                    move(root.children[i], vetor[1:])
                else:
                    return root.children[i]
            elif i == len(root.children) -1:
                print('ARQUIVO ou DIRETÓRIO não existe')
                return 1


root = TreeNode('/')
diretorio_atual = root
while True:
    entrada = input().split()
    comando = entrada[0]
    if comando == 'end':
        break
    if comando == 'mkdir':
        if entrada[1] == '/':
            print('DIRETÓRIO JÁ EXISTE')
        insert_check(root, make_dir(entrada))
    if comando == 'touch':
        if '/' not in entrada[1]:
            insert_touch(root, entrada[1:])
        else:
            insert_touch(root, make_dir(entrada))
    if comando == 'cd':
        if entrada[1] == '.':
            continue
        if entrada[1] == '/':
            diretorio_atual = root
        else:
            new = cd(root, make_dir(entrada))
            if new == -1:
                print('COMANDO INVÁLIDO')
            elif new == 0:
                print('CAMINHO INVÁLIDO')
            else:
                diretorio_atual = new
    if comando == 'show':
        show(root)
    if comando == 'pwd':
        if diretorio_atual == 'pombo':
            diretorio_atual = root
        pwd(diretorio_atual), print('')

    if comando == 'rm':
        remove(root, make_dir(entrada))

    if comando == 'mv':
        entrada_1 = entrada[1][1:].split('/')
        entrada_2 = entrada[2][1:].split('/')
        from_move = move(root, entrada_1)
        if from_move:
            to_move = move(root, entrada_2)
            if to_move:
                pai = from_move.parent
                pai.children.remove(from_move)
                from_move.parent = to_move
                to_move.children.append(from_move)
